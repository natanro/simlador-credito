// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SUsW4bORCGX4WYu3Jhre27g7GdzzACFQkMG0hjuBiRI4kGyaGHXCOGsU+TIkidLq1e",
	"LCA3kqysygDpVrPL+b/5+Y9eQbOPHCjkBN0rJL0mj/XxHQUSdNciLLeUIodEpR6FI0m2VL/SbGrVUNJi",
	"Y7YcoIOrzTdjV5yUIUUirCIKKmsoZLu0GjdfNp+5vIzCC1cVG6BP6KMj6ODuqm1PoYH8EsvPlMWGFQwN",
	"eEoJV0cE31MoL/xO0FBGt0aDB40/bL57klEZRZPDpEJBiWxIJRLlKbCop57Uf1OAYVfhxSPpXJDurO8d",
	"Foxbeuop5alHR4nnBg0pwyqxs9pmDJnesp63OzEbMq1Iihp67kOedvuIjqV007L5amzetzX8tutp27Zt",
	"A0sWjxk6MNwvHO0nDb1fjEo2pIzO+W0yDvWOGVnvOOIKy5lD1bPpLEMDQk+9FTLQ3W8H+0W3qd49TGwf",
	"KuCSp2CXN/MRJNV72QVt60sZ1eYxZfULU3wjdbX17fJmDg08k6Sx4elJe9IWQzhSwGihg/NaaiBiXldv",
	"ZqOYxgoUeQxBiUANxtyUlRDCTPu0wDg/pfw/m5dxlUKm8XIxRmd1/W72mArHdjXL099CS+jgr9l+d2c/",
	"F3c2jeNwaHWWnmph3OjKf9aeTZ0s522yo4OoyWZUmr1KvaaUuFjyT9v+NvCjfzeV/RDretxuJW/wCsu/",
	"f4qlJFoC11UmebaGx3Sn3nuUl13QplGsHcsZkgTd/Sv04qCDdc6xm80ca3RrTrm7aC9aGB6GHwEAAP//",
	"7F72uK0FAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
